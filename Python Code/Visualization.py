# -*- coding: utf-8 -*-
"""Untitled27.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1e9L5W7fnUIOjTFOVayDXqfOIXKJNyJe6
"""

# Импорт либ

import matplotlib.pyplot as plt
import pandas as pd
import numpy as np
from sklearn.linear_model import LinearRegression
import statsmodels.api as sm
from matplotlib.ticker import FormatStrFormatter
from sklearn.metrics import r2_score
import matplotlib.dates as mdates

# Подгражую данные

df = pd.read_excel("/content/monthly_data_commm.xlsx")
df_1 = df.iloc[2:].copy()

# Модели Спецификации 1.1

X = df_1['oil_ln_diff']  # Независимая переменная
y = df_1['aluminum_ln_diff']  # Зависимая переменная

model = sm.OLS(y, X).fit()
b_alu = float(model.params)
print(f'для алюминия b = {model.params}')

X = df_1['oil_ln_diff']  # Независимая переменная
y = df_1['copper_ln_diff']  # Зависимая переменная

model = sm.OLS(y, X).fit()
b_cop = float(model.params)
print(f'для меди b = {model.params}')

X = df_1['oil_ln_diff']  # Независимая переменная
y = df_1['gas_ln_diff']  # Зависимая переменная

model = sm.OLS(y, X).fit()
b_gas = float(model.params)
print(f'для газа b = {model.params}')

X = df_1['oil_ln_diff']  # Независимая переменная
y = df_1['gasus_ln_diff']  # Зависимая переменная

model = sm.OLS(y, X).fit()
b_gas_us = float(model.params)
print(f'для газа US b = {model.params}')


# Выборка для Меди с 2010
X = df_1['oil_ln_diff'].loc[0:200]  # Если индексы совпадают с номерами строк
y = df_1['copper_ln_diff'].loc[0:200]

model = sm.OLS(y, X).fit()
b_cop_1 = float(model.params)
print(f'Для меди 1 b = {model.params}')

X = df_1['oil_ln_diff'].loc[250:421]  # Если индексы совпадают с номерами строк
y = df_1['copper_ln_diff'].loc[250:421]

model = sm.OLS(y, X).fit()
b_cop_2 = float(model.params)
print(f'Для меди 2 b = {model.params}')


# Выборка для Газа (Европа) с 2006
X = df_1['oil_ln_diff'].loc[0:200]  # Если индексы совпадают с номерами строк
y = df_1['gas_ln_diff'].loc[0:200]

model = sm.OLS(y, X).fit()
b_gas_1 = float(model.params)
print(f'Для газа 1 b = {model.params}')

X = df_1['oil_ln_diff'].loc[220:421]  # Если индексы совпадают с номерами строк
y = df_1['gas_ln_diff'].loc[220:421]

model = sm.OLS(y, X).fit()
b_gas_2 = float(model.params)
print(f'Для газа 2 b = {model.params}')

# Visualization 0. Идентификация состояний. Smoothed и Filtered вероятности

# Переключения наклона

COLORS = {
    '_1sm': 'darkblue',
    '_2sm': 'red',
    '_1flt': 'darkblue',
    '_2flt': 'red'
}
df_1['date_m'] = pd.to_datetime(df_1['date_m'], format='%YM%m')
# Создаем фигуру с 4 строками и 2 столбцами подграфиков
fig, axes = plt.subplots(nrows=2, ncols=4, figsize=(12, 6))

# Первый столбец графиков
# Первая строка: alu_b_1sm и alu_b_2sm
axes[0, 0].plot(df_1['date_m'], df_1['alu_b_1sm'], label='alu_b_1sm', color=COLORS['_1sm'], linewidth = 3)
axes[0, 0].plot(df_1['date_m'], df_1['alu_b_2sm'], label='alu_b_2sm', color=COLORS['_2sm'], linewidth = 3)
# axes[0, 0].legend()
axes[0, 0].set_title('Алюминий - smth', fontweight='bold')

# Вторая строка: alu_b_1flt и alu_b_2flt
axes[1, 0].plot(df_1['date_m'], df_1['alu_b_1flt'], label='alu_b_1flt', color=COLORS['_1flt'], linewidth = 2)
axes[1, 0].plot(df_1['date_m'], df_1['alu_b_2flt'], label='alu_b_2flt', color=COLORS['_2flt'], linewidth = 2)
# axes[1, 0].legend()
axes[1, 0].set_title('Алюминий - filt', fontweight='bold')

# Второй столбец графиков
# Первая строка: cop_b_1sm и cop_b_2sm
cop_mask = (df_1['cop_b_1sm'].notna()) & (df_1['cop_b_2sm'].notna())
axes[0, 1].plot(df_1.loc[cop_mask, 'date_m'], df_1.loc[cop_mask, 'cop_b_1sm'], label='cop_b_1sm', color=COLORS['_1sm'], linewidth = 3)
axes[0, 1].plot(df_1.loc[cop_mask, 'date_m'], df_1.loc[cop_mask, 'cop_b_2sm'], label='cop_b_2sm', color=COLORS['_2sm'], linewidth = 3)
# axes[0, 1].legend()
axes[0, 1].set_title('Медь - smth', fontweight='bold')

# Вторая строка: cop_b_1flt и cop_b_2flt
cop_mask = (df_1['cop_b_1flt'].notna()) & (df_1['cop_b_2flt'].notna())
axes[1, 1].plot(df_1.loc[cop_mask, 'date_m'], df_1.loc[cop_mask, 'cop_b_1flt'], label='cop_b_1flt', color=COLORS['_1flt'], linewidth = 3)
axes[1, 1].plot(df_1.loc[cop_mask, 'date_m'], df_1.loc[cop_mask, 'cop_b_2flt'], label='cop_b_2flt', color=COLORS['_2flt'], linewidth = 3)
# axes[1, 1].legend()
axes[1, 1].set_title('Медь - filt', fontweight='bold')

# Третий столбец
# Третья строка: gas_b_1sm и gas_b_2sm
gas_mask = (df_1['gas_b_1sm'].notna()) & (df_1['gas_b_2sm'].notna())
axes[0, 2].plot(df_1.loc[gas_mask, 'date_m'], df_1.loc[gas_mask, 'gas_b_1sm'], label='gas_b_1sm', color=COLORS['_1sm'], linewidth = 3)
axes[0, 2].plot(df_1.loc[gas_mask, 'date_m'], df_1.loc[gas_mask, 'gas_b_2sm'], label='gas_b_2sm', color=COLORS['_2sm'], linewidth = 3)
# axes[0, 2].legend()
axes[0, 2].set_title('Газ (Европа) - smth', fontweight='bold')

# Четвертая строка: gas_b_1flt и gas_b_2flt
gas_mask = (df_1['gas_b_1flt'].notna()) & (df_1['gas_b_2flt'].notna())
axes[1, 2].plot(df_1.loc[gas_mask, 'date_m'], df_1.loc[gas_mask, 'gas_b_1flt'], label='gas_b_1flt', color=COLORS['_1flt'], linewidth = 3)
axes[1, 2].plot(df_1.loc[gas_mask, 'date_m'], df_1.loc[gas_mask, 'gas_b_2flt'], label='gas_b_2flt', color=COLORS['_2flt'], linewidth = 3)
# axes[1, 2].legend()
axes[1, 2].set_title('Газ (Европа) - filt', fontweight='bold')

# Четвертый столбец
# Третья строка: gasus_b_1sm и gasus_b_2sm
gasus_mask = (df_1['gasus_b_1sm'].notna()) & (df_1['gasus_b_2sm'].notna())
axes[0, 3].plot(df_1.loc[gasus_mask, 'date_m'], df_1.loc[gasus_mask, 'gasus_b_1sm'], label='gasus_b_1sm', color=COLORS['_1sm'], linewidth = 2)
axes[0, 3].plot(df_1.loc[gasus_mask, 'date_m'], df_1.loc[gasus_mask, 'gasus_b_2sm'], label='gasus_b_2sm', color=COLORS['_2sm'], linewidth = 2)
# axes[0, 3].legend()
axes[0, 3].set_title('Газ (США) - smth', fontweight='bold')

# Четвертая строка: gasus_b_1flt и gasus_b_2flt
gasus_mask = (df_1['gasus_b_1flt'].notna()) & (df_1['gasus_b_2flt'].notna())
axes[1, 3].plot(df_1.loc[gasus_mask, 'date_m'], df_1.loc[gasus_mask, 'gasus_b_1flt'], label='gasus_b_1flt', color=COLORS['_1flt'], linewidth = 2)
axes[1, 3].plot(df_1.loc[gasus_mask, 'date_m'], df_1.loc[gasus_mask, 'gasus_b_2flt'], label='gasus_b_2flt', color=COLORS['_2flt'], linewidth = 2)
# axes[1, 3].legend()
axes[1, 3].set_title('Газ (США) - filt', fontweight='bold')

# Убираем подписи осей X для всех графиков и настраиваем отступы
for ax in axes.flat:
    ax.set_xlabel('')
    ax.grid(True, linestyle='-', alpha=0.6)
    ax.xaxis.set_major_locator(mdates.YearLocator(5, month=1))

    # Проверяем заголовок графика
    title = ax.get_title()
    if "Медь" in title or "Газ (Европа)" in title:
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))  # Полный год
    else:
        ax.xaxis.set_major_formatter(
            plt.FuncFormatter(lambda x, _: f"{mdates.num2date(x).year % 100:02d}")
        )


plt.tight_layout(pad=1.0)
plt.show()

# Переключения спреда

COLORS = {
    '_1sm': 'darkblue',
    '_2sm': 'red',
    '_1flt': 'darkblue',
    '_2flt': 'red'
}
df_1['date_m'] = pd.to_datetime(df_1['date_m'], format='%YM%m')
# Создаем фигуру с 4 строками и 2 столбцами подграфиков
fig, axes = plt.subplots(nrows=2, ncols=4, figsize=(12, 6))

# Первый столбец графиков
# Первая строка: alu_b_1sm и alu_b_2sm
axes[0, 0].plot(df_1['date_m'], df_1['alu_a_1sm'], label='alu_b_1sm', color=COLORS['_1sm'], linewidth = 2.5)
axes[0, 0].plot(df_1['date_m'], df_1['alu_a_2sm'], label='alu_b_2sm', color=COLORS['_2sm'], linewidth = 2)
# axes[0, 0].legend()
axes[0, 0].set_title('Алюминий - smth', fontweight='bold')

# Вторая строка: alu_b_1flt и alu_b_2flt
axes[1, 0].plot(df_1['date_m'], df_1['alu_a_1flt'], label='alu_b_1flt', color=COLORS['_1flt'], linewidth = 2.5)
axes[1, 0].plot(df_1['date_m'], df_1['alu_a_2flt'], label='alu_b_2flt', color=COLORS['_2flt'], linewidth = 2)
# axes[1, 0].legend()
axes[1, 0].set_title('Алюминий - filt', fontweight='bold')

# Второй столбец графиков
# Первая строка: cop_b_1sm и cop_b_2sm
cop_mask = (df_1['cop_a_1sm'].notna()) & (df_1['cop_a_2sm'].notna())
axes[0, 1].plot(df_1.loc[cop_mask, 'date_m'], df_1.loc[cop_mask, 'cop_a_1sm'], label='cop_b_1sm', color=COLORS['_1sm'], linewidth = 2.5)
axes[0, 1].plot(df_1.loc[cop_mask, 'date_m'], df_1.loc[cop_mask, 'cop_a_2sm'], label='cop_b_2sm', color=COLORS['_2sm'], linewidth = 2)
# axes[0, 1].legend()
axes[0, 1].set_title('Медь - smth', fontweight='bold')

# Вторая строка: cop_b_1flt и cop_b_2flt
cop_mask = (df_1['cop_a_1flt'].notna()) & (df_1['cop_a_2flt'].notna())
axes[1, 1].plot(df_1.loc[cop_mask, 'date_m'], df_1.loc[cop_mask, 'cop_a_1flt'], label='cop_b_1flt', color=COLORS['_1flt'], linewidth = 2.5)
axes[1, 1].plot(df_1.loc[cop_mask, 'date_m'], df_1.loc[cop_mask, 'cop_a_2flt'], label='cop_b_2flt', color=COLORS['_2flt'], linewidth = 2)
# axes[1, 1].legend()
axes[1, 1].set_title('Медь - filt', fontweight='bold')

# Третий столбец
# Третья строка: gas_b_1sm и gas_b_2sm
gas_mask = (df_1['gas_a_1sm'].notna()) & (df_1['gas_a_2sm'].notna())
axes[0, 2].plot(df_1.loc[gas_mask, 'date_m'], df_1.loc[gas_mask, 'gas_a_1sm'], label='gas_b_1sm', color=COLORS['_1sm'], linewidth = 2.5)
axes[0, 2].plot(df_1.loc[gas_mask, 'date_m'], df_1.loc[gas_mask, 'gas_a_2sm'], label='gas_b_2sm', color=COLORS['_2sm'], linewidth = 2)
# axes[0, 2].legend()
axes[0, 2].set_title('Газ (Европа) - smth', fontweight='bold')

# Четвертая строка: gas_b_1flt и gas_b_2flt
gas_mask = (df_1['gas_a_1flt'].notna()) & (df_1['gas_a_2flt'].notna())
axes[1, 2].plot(df_1.loc[gas_mask, 'date_m'], df_1.loc[gas_mask, 'gas_a_1flt'], label='gas_b_1flt', color=COLORS['_1flt'], linewidth = 2.5)
axes[1, 2].plot(df_1.loc[gas_mask, 'date_m'], df_1.loc[gas_mask, 'gas_a_2flt'], label='gas_b_2flt', color=COLORS['_2flt'], linewidth = 2)
# axes[1, 2].legend()
axes[1, 2].set_title('Газ (Европа) - filt', fontweight='bold')

# Четвертый столбец
# Третья строка: gasus_b_1sm и gasus_b_2sm
gasus_mask = (df_1['gasus_a_1sm'].notna()) & (df_1['gasus_a_2sm'].notna())
axes[0, 3].plot(df_1.loc[gasus_mask, 'date_m'], df_1.loc[gasus_mask, 'gasus_a_1sm'], label='gasus_b_1sm', color=COLORS['_1sm'], linewidth = 2.5)
axes[0, 3].plot(df_1.loc[gasus_mask, 'date_m'], df_1.loc[gasus_mask, 'gasus_a_2sm'], label='gasus_b_2sm', color=COLORS['_2sm'], linewidth = 2)
# axes[0, 3].legend()
axes[0, 3].set_title('Газ (США) - smth', fontweight='bold')

# Четвертая строка: gasus_b_1flt и gasus_b_2flt
gasus_mask = (df_1['gasus_a_1flt'].notna()) & (df_1['gasus_a_2flt'].notna())
axes[1, 3].plot(df_1.loc[gasus_mask, 'date_m'], df_1.loc[gasus_mask, 'gasus_a_1flt'], label='gasus_b_1flt', color=COLORS['_1flt'], linewidth = 2.5)
axes[1, 3].plot(df_1.loc[gasus_mask, 'date_m'], df_1.loc[gasus_mask, 'gasus_a_2flt'], label='gasus_b_2flt', color=COLORS['_2flt'], linewidth = 2)
# axes[1, 3].legend()
axes[1, 3].set_title('Газ (США) - filt', fontweight='bold')

# Убираем подписи осей X для всех графиков и настраиваем отступы
for ax in axes.flat:
    ax.set_xlabel('')
    ax.grid(True, linestyle='--', alpha=0.6)
    ax.xaxis.set_major_locator(mdates.YearLocator(5, month=1))

    # Проверяем заголовок графика
    title = ax.get_title()
    if "Медь" in title or "Газ (Европа)" in title:
        ax.xaxis.set_major_formatter(mdates.DateFormatter('%Y'))  # Полный год
    else:
        ax.xaxis.set_major_formatter(
            plt.FuncFormatter(lambda x, _: f"{mdates.num2date(x).year % 100:02d}")
        )


plt.tight_layout(pad=1.0)
plt.show()

# Visualization 1. Совместная динамика сырьевых товаров

# Создаем фигуру с 2x2 субплoтами
fig, axes = plt.subplots(nrows=2, ncols=2, figsize=(14, 10))
fig.tight_layout(pad=4.0)  # Отступы между графиками

# Графики (остаются без изменений)
axes[0, 0].plot(df['date_m'], df['oil_ln'], color='darkblue', linewidth=2.5)
axes[0, 0].set_title('Нефть', fontsize=14, fontweight='bold')
axes[0, 0].grid(True, linestyle='--', alpha=0.6)

axes[0, 1].plot(df['date_m'], df['aluminum_ln'], color='darkblue', linewidth=2.5)
axes[0, 1].set_title('Алюминий', fontsize=14, fontweight='bold')
axes[0, 1].grid(True, linestyle='--', alpha=0.6)

axes[1, 0].plot(df['date_m'], df['copper_ln'], color='darkblue', linewidth=2.5)
axes[1, 0].set_title('Медь', fontsize=14, fontweight='bold')
axes[1, 0].grid(True, linestyle='--', alpha=0.6)

axes[1, 1].plot(df['date_m'], df['gas_ln'], color='darkblue', linewidth=2.5)
axes[1, 1].set_title('Газ', fontsize=14, fontweight='bold')
axes[1, 1].grid(True, linestyle='--', alpha=0.6)

# Общие настройки
for ax in axes.flat:
    # Получаем текущие позиции делений и метки
    locs = ax.get_xticks()
    labels = ax.get_xticklabels()

    # Собираем только нужные деления (M01 и год оканчивается на 0 или 5)
    new_ticks = []
    new_labels = []

    for tick, label in zip(locs, labels):
        text = label.get_text()
        if 'M01' in text:  # Только январь
            year = text[:4]  # Берем год
            if year.endswith(('0', '5')):  # Года, оканчивающиеся на 0 или 5
                new_ticks.append(tick)  # Оставляем позицию деления
                new_labels.append(year)  # Подписываем год

    # Устанавливаем новые деления и метки
    ax.set_xticks(new_ticks)
    ax.set_xticklabels(new_labels)  # Наклон подписей

plt.show()

# Visualization 2. Средний спред

fig, axs = plt.subplots(2, 2, figsize=(14, 10))
plt.subplots_adjust(hspace=0.3, wspace=0.2)

# Алюминий
filtered_dates = df[df['date_m'].str.contains(r'0M01|5M01')]
filtered_dates['date_formatted'] = filtered_dates['date_m'].str[:4]
df['oil_ln_new'] = df['oil_ln'] * b_alu
df['spread_alu'] = df['aluminum_ln'] - df['oil_ln_new']
avg_spread_alu = df['spread_alu'].mean()

ax1 = axs[0, 0]
line1, = ax1.plot(df['date_m'], df['spread_alu'], color='black', linewidth=2, label='Спред')
line2 = ax1.axhline(avg_spread_alu, color='red', linestyle='-', linewidth=2, label=f'Средний спред: {avg_spread_alu:.2f}')
ax1.tick_params(axis='y', labelcolor='black')
ax1.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
ax1.set_ylim(df['spread_alu'].min()*0.9, df['spread_alu'].max()*1.1)
for i in range(len(df)-1):
    if df['spread_alu'].iloc[i+1] > avg_spread_alu:
        ax1.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i+1], color='blue', alpha=0.15)
ax1.grid(True, linestyle='-', alpha=0.6)
ax1.set_xticks(filtered_dates['date_m'])
ax1.set_xticklabels(filtered_dates['date_formatted'])
ax1.set_title('Спред между Нефтью и Алюминием', fontweight='bold')
ax1.legend(handles=[line1, line2], loc='upper left', facecolor='white', framealpha=1)

# Медь
df['oil_ln_new'] = df['oil_ln'] * b_cop
df['spread_cop'] = df['copper_ln'] - df['oil_ln_new']
avg_spread_cop = df['spread_cop'].mean()

ax2 = axs[0, 1]
line1, = ax2.plot(df['date_m'], df['spread_cop'], color='black', linewidth=2, label='Спред')
line2 = ax2.axhline(avg_spread_cop, color='red', linestyle='-', linewidth=2, label=f'Средний спред: {avg_spread_cop:.2f}')
ax2.tick_params(axis='y', labelcolor='black')
ax2.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
ax2.set_ylim(df['spread_cop'].min()*0.9, df['spread_cop'].max()*1.1)
for i in range(len(df)-1):
    if df['spread_cop'].iloc[i] > avg_spread_cop:
        ax2.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i+1], color='blue', alpha=0.15)
ax2.grid(True, linestyle='-', alpha=0.6)
ax2.set_xticks(filtered_dates['date_m'])
ax2.set_xticklabels(filtered_dates['date_formatted'])
ax2.set_title('Спред между Нефтью и Медью', fontweight='bold')
ax2.legend(handles=[line1, line2], loc='upper left', facecolor='white', framealpha=1)

# Газ (Европа)
df['oil_ln_new'] = df['oil_ln'] * b_gas
df['spread_gas'] = df['gas_ln'] - df['oil_ln_new']
avg_spread_gas = df['spread_gas'].mean()

ax3 = axs[1, 0]
line1, = ax3.plot(df['date_m'], df['spread_gas'], color='black', linewidth=2, label='Спред')
line2 = ax3.axhline(avg_spread_gas, color='red', linestyle='-', linewidth=2, label=f'Средний спред: {avg_spread_gas:.2f}')
ax3.tick_params(axis='y', labelcolor='black')
ax3.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
ax3.set_ylim(df['spread_gas'].min()*0.9, df['spread_gas'].max()*1.1)
for i in range(len(df)-1):
    if df['spread_gas'].iloc[i] > avg_spread_gas:
        ax3.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i+1], color='blue', alpha=0.15)
ax3.grid(True, linestyle='-', alpha=0.6)
ax3.set_xticks(filtered_dates['date_m'])
ax3.set_xticklabels(filtered_dates['date_formatted'])
ax3.set_title('Спред между Нефтью и Газом (Европа)', fontweight='bold')
ax3.legend(handles=[line1, line2], loc='upper left', facecolor='white', framealpha=1)

# Газ (США)
df['oil_ln_new'] = df['oil_ln'] * b_gas_us
df['spread_gas_us'] = df['gasus_ln'] - df['oil_ln_new']
avg_spread_gas_us = df['spread_gas_us'].mean()

ax4 = axs[1, 1]
line1, = ax4.plot(df['date_m'], df['spread_gas_us'], color='black', linewidth=2, label='Спред')
line2 = ax4.axhline(avg_spread_gas_us, color='red', linestyle='-', linewidth=2, label=f'Средний спред: {avg_spread_gas_us:.2f}')
ax4.tick_params(axis='y', labelcolor='black')
ax4.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
ax4.set_ylim(df['spread_gas_us'].min()*0.9, df['spread_gas_us'].max()*1.1)
for i in range(len(df)-1):
    if df['spread_gas_us'].iloc[i+1] > avg_spread_gas_us:
        ax4.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i+1], color='blue', alpha=0.15)
ax4.grid(True, linestyle='-', alpha=0.6)
ax4.set_xticks(filtered_dates['date_m'])
ax4.set_xticklabels(filtered_dates['date_formatted'])
ax4.set_title('Спред между Нефтью и Газом (США)', fontweight='bold')
ax4.legend(handles=[line1, line2], loc='upper left', facecolor='white', framealpha=1)

plt.tight_layout()
plt.show()

# Visualization 3. Модели Спецификации 1 (верхний график) и Спецификации 2 (нижний график)

# Алюминий

df['oil_ln_new'] = df['oil_ln'] * b_alu
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))

### Первый график: Filtered States (state_1_filt, state_2_filt) + нефть и алюминий
# Основные данные (state_1_filt и state_2_filt)
ax1.plot(df['date_m'], df['alu_b_1sm'], label='Состояние 1', color='blue', linewidth=3)
ax1.plot(df['date_m'], df['alu_b_2sm'], label='Состояние 2', color='red', linewidth=3)
ax1.set_ylabel('Вероятность состояния', fontsize=12, fontweight='bold')  # Добавлена подпись оси Y
ax1.set_title('Состояния по коэффициенту наклона Нефть & Алюминий', pad=20, fontweight='bold')
ax1.legend(loc='upper left', facecolor='white', framealpha=1, fontsize=11)
ax1.grid(True, linestyle='--', alpha=0.6)

# Добавляем правую ось для нефти (oil_ln)
ax1_oil = ax1.twinx()
ax1_oil.set_ylabel('Нефть', color='black', fontsize=12, fontweight='bold')
ax1_oil.plot(df['date_m'], df['oil_ln_new'], color='black', linewidth=2, linestyle='-')
ax1_oil.tick_params(axis='y', labelcolor='black')
ax1_oil.set_ylim(0.1, 1.5)
ax1_oil.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])

# Добавляем ещё одну правую ось для алюминия (aluminum_ln)
ax1_alu = ax1.twinx()
ax1_alu.spines['right'].set_position(('outward', 60))  # Сдвигаем ось алюминия правее
ax1_alu.set_ylabel('Алюминий', color='grey', fontsize=12, fontweight='bold')
ax1_alu.plot(df['date_m'], df['aluminum_ln'], color='grey', linewidth=3, linestyle='-')
ax1_alu.tick_params(axis='y', labelcolor='black')
ax1_alu.set_ylim(6.8, 8.2)

### Второй график: Original States (state_1, state_2) + нефть и алюминий
# Основные данные (state_1 и state_2)
ax2.plot(df['date_m'], df['alu_a_1sm'], label='Состояние 1', color='blue', linewidth=3)
ax2.plot(df['date_m'], df['alu_a_2sm'], label='Состояние 2', color='red', linewidth=3)
ax2.set_ylabel('Вероятность состояния', fontsize=12, fontweight='bold')  # Добавлена подпись оси Y
ax2.set_title('Состояния по спреду Нефть & Алюминий', pad=20, fontweight='bold')
ax2.legend(loc='upper left', facecolor='white', framealpha=1, fontsize=11)
ax2.grid(True, linestyle='--', alpha=0.6)

# Добавляем правую ось для нефти (oil_ln)
ax2_oil = ax2.twinx()
ax2_oil.set_ylabel('Нефть', color='black', fontsize=12, fontweight='bold')
ax2_oil.plot(df['date_m'], df['oil_ln_new'], color='black', linewidth=2, linestyle='-')
ax2_oil.tick_params(axis='y', labelcolor='black')
ax2_oil.set_ylim(0.1, 1.5)
ax2_oil.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])

# Добавляем ещё одну правую ось для алюминия (aluminum_ln)
ax2_alu = ax2.twinx()
ax2_alu.spines['right'].set_position(('outward', 60))  # Сдвигаем ось алюминия правее
ax2_alu.set_ylabel('Алюминий', color='grey', fontsize=12, fontweight='bold')
ax2_alu.plot(df['date_m'], df['aluminum_ln'], color='grey', linewidth=3, linestyle='-')
ax2_alu.tick_params(axis='y', labelcolor='black')
ax2_alu.set_ylim(6.8, 8.2)

### Настройка осей X (даты)
filtered_dates = df[df['date_m'].str.contains(r'0M01|5M01')]
filtered_dates['date_formatted'] = filtered_dates['date_m'].str[:4]

# Устанавливаем метки для оси X на обоих графиках
for ax in [ax1, ax2]:
    ax.set_xticks(filtered_dates['date_m'])
    ax.set_xticklabels(filtered_dates['date_formatted'], ha='center')

plt.tight_layout()
plt.show()

# Медь

daf = df.iloc[250:].copy()

daf['oil_ln_new'] = daf['oil_ln'] * b_cop_2
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))

### Первый график: Filtered States (state_1_filt, state_2_filt) + нефть и алюминий
# Основные данные (state_1_filt и state_2_filt)
ax1.plot(daf['date_m'], daf['cop_b_1sm'], label='Состояние 1', color='blue', linewidth=3)
ax1.plot(daf['date_m'], daf['cop_b_2sm'], label='Состояние 2', color='red', linewidth=3)
ax1.set_ylabel('Вероятность состояния', fontsize=12, fontweight='bold')  # Добавлена подпись оси Y
ax1.set_title('Состояния по коэффициенту наклона Нефть & Медь', pad=20, fontweight='bold')
ax1.legend(loc='lower left', facecolor='white', framealpha=1, fontsize=11)
ax1.grid(True, linestyle='--', alpha=0.6)

# Добавляем правую ось для нефти (oil_ln)
ax1_oil = ax1.twinx()
ax1_oil.set_ylabel('Нефть', color='black', fontsize=12, fontweight='bold')
ax1_oil.plot(daf['date_m'], daf['oil_ln_new'], color='black', linewidth=2, linestyle='-')
ax1_oil.tick_params(axis='y', labelcolor='black')
ax1_oil.set_ylim(0.4, 1.2)
# ax1_oil.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])

# Добавляем ещё одну правую ось для алюминия (aluminum_ln)
ax1_alu = ax1.twinx()
ax1_alu.spines['right'].set_position(('outward', 60))  # Сдвигаем ось алюминия правее
ax1_alu.set_ylabel('Медь', color='grey', fontsize=12, fontweight='bold')
ax1_alu.plot(daf['date_m'], daf['copper_ln'], color='grey', linewidth=3, linestyle='-')
ax1_alu.tick_params(axis='y', labelcolor='black')
# ax1_alu.set_ylim(6.8, 8.2)

### Второй график: Original States (state_1, state_2) + нефть и алюминий
# Основные данные (state_1 и state_2)
ax2.plot(daf['date_m'], daf['cop_a_1sm'], label='Состояние 1', color='blue', linewidth=3)
ax2.plot(daf['date_m'], daf['cop_a_2sm'], label='Состояние 2', color='red', linewidth=3)
ax2.set_ylabel('Вероятность состояния', fontsize=12, fontweight='bold')  # Добавлена подпись оси Y
ax2.set_title('Состояния по спреду Нефть & Медь', pad=20, fontweight='bold')
ax2.legend(loc='lower left', facecolor='white', framealpha=1, fontsize=11)
ax2.grid(True, linestyle='--', alpha=0.6)

# Добавляем правую ось для нефти (oil_ln)
ax2_oil = ax2.twinx()
ax2_oil.set_ylabel('Нефть', color='black', fontsize=12, fontweight='bold')
ax2_oil.plot(daf['date_m'], daf['oil_ln_new'], color='black', linewidth=2, linestyle='-')
ax2_oil.tick_params(axis='y', labelcolor='black')
ax2_oil.set_ylim(0.4, 1.2)
# ax2_oil.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])

# Добавляем ещё одну правую ось для алюминия (aluminum_ln)
ax2_alu = ax2.twinx()
ax2_alu.spines['right'].set_position(('outward', 60))  # Сдвигаем ось алюминия правее
ax2_alu.set_ylabel('Медь', color='grey', fontsize=12, fontweight='bold')
ax2_alu.plot(daf['date_m'], daf['copper_ln'], color='grey', linewidth=3, linestyle='-')
ax2_alu.tick_params(axis='y', labelcolor='black')
# ax2_alu.set_ylim(6.8, 8.2)

### Настройка осей X (даты)
# Получаем все даты, заканчивающиеся на 0M01 или 5M01
filtered_dates = daf[daf['date_m'].str.contains(r'0M01|5M01')].copy()
filtered_dates['date_formatted'] = filtered_dates['date_m'].str[:4]

# Добавляем самую первую дату из исходных данных (если её ещё нет)
first_date = daf.iloc[0]['date_m']
if first_date not in filtered_dates['date_m'].values:
    first_row = daf[daf['date_m'] == first_date].copy()
    first_row['date_formatted'] = first_row['date_m'].str[:4]
    filtered_dates = pd.concat([first_row, filtered_dates]).sort_values('date_m')

# Устанавливаем метки для оси X на обоих графиках
for ax in [ax1, ax2]:
    ax.set_xticks(filtered_dates['date_m'])
    ax.set_xticklabels(filtered_dates['date_formatted'], ha='center')

plt.tight_layout()
plt.show()

# Газ (Европа)

daf = df.iloc[200:].copy()
daf['oil_ln_new'] = daf['oil_ln'] * b_gas_2
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))

### Первый график: Filtered States (state_1_filt, state_2_filt) + нефть и алюминий
# Основные данные (state_1_filt и state_2_filt)
ax1.plot(daf['date_m'], daf['gas_b_1sm'], label='Состояние 1', color='blue', linewidth=3)
ax1.plot(daf['date_m'], daf['gas_b_2sm'], label='Состояние 2', color='red', linewidth=3)
ax1.set_ylabel('Вероятность состояния', fontsize=12, fontweight='bold')  # Добавлена подпись оси Y
ax1.set_title('Состояния по коэффициенту наклона Нефть & Газ (Европа)', pad=20, fontweight='bold')
ax1.legend(loc='lower left', facecolor='white', framealpha=1, fontsize=11)
ax1.grid(True, linestyle='--', alpha=0.6)

# Добавляем правую ось для нефти (oil_ln)
ax1_oil = ax1.twinx()
ax1_oil.set_ylabel('Нефть', color='black', fontsize=12, fontweight='bold')
ax1_oil.plot(daf['date_m'], daf['oil_ln_new'], color='black', linewidth=2, linestyle='-')
ax1_oil.tick_params(axis='y', labelcolor='black')
# ax1_oil.set_ylim(0.4, 1.2)
# ax1_oil.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])

# Добавляем ещё одну правую ось для алюминия (aluminum_ln)
ax1_alu = ax1.twinx()
ax1_alu.spines['right'].set_position(('outward', 60))  # Сдвигаем ось алюминия правее
ax1_alu.set_ylabel('Газ (Европа)', color='grey', fontsize=12, fontweight='bold')
ax1_alu.plot(daf['date_m'], daf['gas_ln'], color='grey', linewidth=3, linestyle='-')
ax1_alu.tick_params(axis='y', labelcolor='black')
# ax1_alu.set_ylim(6.8, 8.2)

### Второй график: Original States (state_1, state_2) + нефть и алюминий
# Основные данные (state_1 и state_2)
ax2.plot(daf['date_m'], daf['gas_a_1sm'], label='Состояние 1', color='blue', linewidth=3)
ax2.plot(daf['date_m'], daf['gas_a_2sm'], label='Состояние 2', color='red', linewidth=3)
ax2.set_ylabel('Вероятность состояния', fontsize=12, fontweight='bold')  # Добавлена подпись оси Y
ax2.set_title('Состояния по спреду Нефть & Газ (Европа)', pad=20, fontweight='bold')
ax2.legend(loc='lower left', facecolor='white', framealpha=1, fontsize=11)
ax2.grid(True, linestyle='--', alpha=0.6)

# Добавляем правую ось для нефти (oil_ln)
ax2_oil = ax2.twinx()
ax2_oil.set_ylabel('Нефть', color='black', fontsize=12, fontweight='bold')
ax2_oil.plot(daf['date_m'], daf['oil_ln_new'], color='black', linewidth=2, linestyle='-')
ax2_oil.tick_params(axis='y', labelcolor='black')
# ax2_oil.set_ylim(0.4, 1.2)
# ax2_oil.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])

# Добавляем ещё одну правую ось для алюминия (aluminum_ln)
ax2_alu = ax2.twinx()
ax2_alu.spines['right'].set_position(('outward', 60))  # Сдвигаем ось алюминия правее
ax2_alu.set_ylabel('Газ (Европа)', color='grey', fontsize=12, fontweight='bold')
ax2_alu.plot(daf['date_m'], daf['gas_ln'], color='grey', linewidth=3, linestyle='-')
ax2_alu.tick_params(axis='y', labelcolor='black')
# ax2_alu.set_ylim(0, 7)

### Настройка осей X (даты)
# Получаем все даты, заканчивающиеся на 0M01 или 5M01
filtered_dates = daf[daf['date_m'].str.contains(r'0M01|5M01')].copy()
filtered_dates['date_formatted'] = filtered_dates['date_m'].str[:4]

# Добавляем самую первую дату из исходных данных (если её ещё нет)
first_date = daf.iloc[0]['date_m']
if first_date not in filtered_dates['date_m'].values:
    first_row = daf[daf['date_m'] == first_date].copy()
    first_row['date_formatted'] = first_row['date_m'].str[:4]
    filtered_dates = pd.concat([first_row, filtered_dates]).sort_values('date_m')

# Устанавливаем метки для оси X на обоих графиках
for ax in [ax1, ax2]:
    ax.set_xticks(filtered_dates['date_m'])
    ax.set_xticklabels(filtered_dates['date_formatted'], ha='center')

plt.tight_layout()
plt.show()

# Газ (США)

df['oil_ln_new'] = df['oil_ln'] * b_gas_us
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(12, 8))

### Первый график: Filtered States (state_1_filt, state_2_filt) + нефть и алюминий
# Основные данные (state_1_filt и state_2_filt)
ax1.plot(df['date_m'], df['gasus_b_1sm'], label='Состояние 1', color='blue', linewidth=3)
ax1.plot(df['date_m'], df['gasus_b_2sm'], label='Состояние 2', color='red', linewidth=3)
ax1.set_ylabel('Вероятность состояния', fontsize=12, fontweight='bold')  # Добавлена подпись оси Y
ax1.set_title('Состояния по коэффициенту наклона Нефть & Газ (США)', pad=20, fontweight='bold')
ax1.legend(loc='upper left', facecolor='white', framealpha=1, fontsize=11)
ax1.grid(True, linestyle='--', alpha=0.6)

# Добавляем правую ось для нефти (oil_ln)
ax1_oil = ax1.twinx()
ax1_oil.set_ylabel('Нефть', color='black', fontsize=12, fontweight='bold')
ax1_oil.plot(df['date_m'], df['oil_ln_new'], color='black', linewidth=2, linestyle='-')
ax1_oil.tick_params(axis='y', labelcolor='black')
ax1_oil.set_ylim(0.1, 1.5)
# ax1_oil.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])

# Добавляем ещё одну правую ось для алюминия (aluminum_ln)
ax1_alu = ax1.twinx()
ax1_alu.spines['right'].set_position(('outward', 60))  # Сдвигаем ось алюминия правее
ax1_alu.set_ylabel('Газ (США)', color='grey', fontsize=12, fontweight='bold')
ax1_alu.plot(df['date_m'], df['gasus_ln'], color='grey', linewidth=3, linestyle='-')
ax1_alu.tick_params(axis='y', labelcolor='black')
# ax1_alu.set_ylim(6.8, 8.2)

### Второй график: Original States (state_1, state_2) + нефть и алюминий
# Основные данные (state_1 и state_2)
ax2.plot(df['date_m'], df['gasus_a_1sm'], label='Состояние 1', color='blue', linewidth=3)
ax2.plot(df['date_m'], df['gasus_a_2sm'], label='Состояние 2', color='red', linewidth=3)
ax2.set_ylabel('Вероятность состояния', fontsize=12, fontweight='bold')  # Добавлена подпись оси Y
ax2.set_title('Состояния по спреду Нефть & Газ (США)', pad=20, fontweight='bold')
ax2.legend(loc='upper left', facecolor='white', framealpha=1, fontsize=11)
ax2.grid(True, linestyle='--', alpha=0.6)

# Добавляем правую ось для нефти (oil_ln)
ax2_oil = ax2.twinx()
ax2_oil.set_ylabel('Нефть', color='black', fontsize=12, fontweight='bold')
ax2_oil.plot(df['date_m'], df['oil_ln_new'], color='black', linewidth=2, linestyle='-')
ax2_oil.tick_params(axis='y', labelcolor='black')
ax2_oil.set_ylim(0.1, 1.5)
# ax2_oil.set_yticks([0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5])

# Добавляем ещё одну правую ось для алюминия (aluminum_ln)
ax2_alu = ax2.twinx()
ax2_alu.spines['right'].set_position(('outward', 60))  # Сдвигаем ось алюминия правее
ax2_alu.set_ylabel('Газ (США)', color='grey', fontsize=12, fontweight='bold')
ax2_alu.plot(df['date_m'], df['gasus_ln'], color='grey', linewidth=3, linestyle='-')
ax2_alu.tick_params(axis='y', labelcolor='black')
# ax2_alu.set_ylim(6.8, 8.2)

### Настройка осей X (даты)
filtered_dates = df[df['date_m'].str.contains(r'0M01|5M01')]
filtered_dates['date_formatted'] = filtered_dates['date_m'].str[:4]

# Устанавливаем метки для оси X на обоих графиках
for ax in [ax1, ax2]:
    ax.set_xticks(filtered_dates['date_m'])
    ax.set_xticklabels(filtered_dates['date_formatted'], ha='center')

plt.tight_layout()
plt.show()

# Visualization 4. Модели Спецификации 2. Двойной график: режимы по спреду, средний спред

# Алюминий

# Создаем фигуру с двумя подграфиками (2 строки, 1 столбец)
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 6))
plt.subplots_adjust(hspace=0.4)  # Добавляем отступ между графиками

# Первый график: Логарифмы цен Нефти и Алюминия
filtered_dates = df[df['date_m'].str.contains(r'0M01|5M01')]
filtered_dates['date_formatted'] = filtered_dates['date_m'].str[:4]
df['oil_ln_new'] = df['oil_ln'] * b_alu

ax1.set_ylabel('Нефть', color='black', fontweight='bold', fontsize=11)
ax1.plot(df['date_m'], df['oil_ln_new'], color='black', linewidth=2, label='Нефть')
ax1.tick_params(axis='y', labelcolor='black')
ax1.set_ylim(0.1, 1.5)
y_ticks = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]
ax1.set_yticks(y_ticks)
ax1.set_yticklabels([str(tick) for tick in y_ticks])

ax1b = ax1.twinx()
ax1b.set_ylabel('Алюминий', color='darkred', fontweight='bold', fontsize=11)
ax1b.plot(df['date_m'], df['aluminum_ln'], color='darkred', linewidth=2, label='Алюминий')
ax1b.tick_params(axis='y', labelcolor='darkred')
ax1b.set_ylim(6.8, 8.2)

ax1.grid(True, linestyle='-', alpha=0.6)
ax1.set_xticks(filtered_dates['date_m'])
ax1.set_xticklabels(filtered_dates['date_formatted'])

for i in range(len(df) - 1):
    if df['alu_a_1sm'].iloc[i] > 0.5:
        ax1.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='white', alpha=0.1)
    else:
        ax1.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='blue', alpha=0.15)

lines1, labels1 = ax1.get_legend_handles_labels()
lines1b, labels1b = ax1b.get_legend_handles_labels()
ax1.legend(lines1 + lines1b, labels1 + labels1b, loc='upper left', facecolor='white', framealpha=1)
ax1.set_title('Логарифмы цен Нефти и Алюминия', fontsize=11, fontweight='bold')

# Второй график: Спред между Алюминием и Нефтью
df['spread'] = df['aluminum_ln'] - df['oil_ln_new']
avg_spread = df['spread'].mean()

ax2.set_ylabel('Spread (Алюминий - Нефть * b_alu)', color='white')
ax2.plot(df['date_m'], df['spread'], color='black', linewidth=2, label='Спред')
ax2.tick_params(axis='y', labelcolor='black')
ax2.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
ax2.axhline(avg_spread, color='red', linestyle='-', linewidth=2, label=f'Средний спред: {avg_spread:.2f}')
ax2.set_ylim(df['spread'].min() * 0.9, df['spread'].max() * 1.1)

for i in range(len(df) - 1):
    if df['spread'].iloc[i] > avg_spread:
        ax2.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='blue', alpha=0.15)

ax2.grid(axis='y', linestyle='-', alpha=0.6)
ax2.set_xticks(filtered_dates['date_m'])
ax2.set_xticklabels(filtered_dates['date_formatted'])

lines2, labels2 = ax2.get_legend_handles_labels()
ax2.legend(lines2, labels2, loc='upper left', facecolor='white', framealpha=1)
ax2.set_title('Спред между Нефтью и Алюминием', fontsize=11, fontweight='bold')

plt.tight_layout()
plt.show()

# Медь

df = df.iloc[250:].copy()
# Создаем фигуру с двумя подграфиками (2 строки, 1 столбец)
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 6))
plt.subplots_adjust(hspace=0.4)  # Добавляем отступ между графиками

# Первый график: Логарифмы цен Нефти и Алюминия
filtered_dates = df[df['date_m'].str.contains(r'0M01|5M01')]
filtered_dates['date_formatted'] = filtered_dates['date_m'].str[:4]
df['oil_ln_new'] = df['oil_ln'] * b_gas_2

ax1.set_ylabel('Нефть', color='black', fontweight='bold', fontsize=11)
ax1.plot(df['date_m'], df['oil_ln_new'], color='black', linewidth=2, label='Нефть')
ax1.tick_params(axis='y', labelcolor='black')
# ax1.set_ylim(0.3, 0.7)
# y_ticks = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]
ax1.set_yticks(y_ticks)
ax1.set_yticklabels([str(tick) for tick in y_ticks])

ax1b = ax1.twinx()
ax1b.set_ylabel('Медь', color='darkred', fontweight='bold', fontsize=11)
ax1b.plot(df['date_m'], df['copper_ln'], color='darkred', linewidth=2, label='Медь')
ax1b.tick_params(axis='y', labelcolor='darkred')
# ax1b.set_ylim(6.8, 8.2)

ax1.grid(True, linestyle='-', alpha=0.6)
ax1.set_xticks(filtered_dates['date_m'])
ax1.set_xticklabels(filtered_dates['date_formatted'])

for i in range(len(df) - 1):
    if df['cop_a_1sm'].iloc[i] > 0.5:
        ax1.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='white', alpha=0.1)
    else:
        ax1.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='blue', alpha=0.15)

lines1, labels1 = ax1.get_legend_handles_labels()
lines1b, labels1b = ax1b.get_legend_handles_labels()
ax1.legend(lines1 + lines1b, labels1 + labels1b, loc='lower left', facecolor='white', framealpha=1)
ax1.set_title('Логарифмы цен Нефти и Меди', fontsize=11, fontweight='bold')

# Второй график: Спред между Алюминием и Нефтью
df['spread'] = df['copper_ln'] - df['oil_ln_new']
avg_spread = df['spread'].mean()

ax2.set_ylabel('Spread (Алюминий - Нефть * b_alu)', color='white')
ax2.plot(df['date_m'], df['spread'], color='black', linewidth=2, label='Спред')
ax2.tick_params(axis='y', labelcolor='black')
ax2.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
ax2.axhline(avg_spread, color='red', linestyle='-', linewidth=2, label=f'Средний спред: {avg_spread:.2f}')
ax2.set_ylim(df['spread'].min() * 0.9, df['spread'].max() * 1.1)

for i in range(len(df) - 1):
    if df['spread'].iloc[i+1] > avg_spread:
        ax2.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='blue', alpha=0.15)
ax1.set_ylim(0.3, 0.7)
# ax1b.set_ylim(6.8, 8.2)
ax2.grid(axis='y', linestyle='-', alpha=0.6)
ax2.set_xticks(filtered_dates['date_m'])
ax2.set_xticklabels(filtered_dates['date_formatted'])

lines2, labels2 = ax2.get_legend_handles_labels()
ax2.legend(lines2, labels2, loc='upper left', facecolor='white', framealpha=1)
ax2.set_title('Спред между Нефтью и Медью', fontsize=11, fontweight='bold')

plt.tight_layout()
plt.show()

# Газ (Европа)

df = df.iloc[200:].copy()
# Создаем фигуру с двумя подграфиками (2 строки, 1 столбец)
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 6))
plt.subplots_adjust(hspace=0.4)  # Добавляем отступ между графиками

# Первый график: Логарифмы цен Нефти и Алюминия
filtered_dates = df[df['date_m'].str.contains(r'0M01|5M01')]
filtered_dates['date_formatted'] = filtered_dates['date_m'].str[:4]
df['oil_ln_new'] = df['oil_ln'] * b_gas_2

ax1.set_ylabel('Нефть', color='black', fontweight='bold', fontsize=11)
ax1.plot(df['date_m'], df['oil_ln_new'], color='black', linewidth=2, label='Нефть')
ax1.tick_params(axis='y', labelcolor='black')
# ax1.set_ylim(0.3, 0.7)
# y_ticks = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]
ax1.set_yticks(y_ticks)
ax1.set_yticklabels([str(tick) for tick in y_ticks])

ax1b = ax1.twinx()
ax1b.set_ylabel('Газ (Европа)', color='darkred', fontweight='bold', fontsize=11)
ax1b.plot(df['date_m'], df['gas_ln'], color='darkred', linewidth=2, label='Газ (Европа)')
ax1b.tick_params(axis='y', labelcolor='darkred')
# ax1b.set_ylim(6.8, 8.2)

ax1.grid(True, linestyle='-', alpha=0.6)
ax1.set_xticks(filtered_dates['date_m'])
ax1.set_xticklabels(filtered_dates['date_formatted'])

for i in range(len(df) - 1):
    if df['gas_a_1sm'].iloc[i] <= 0.5:
        ax1.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='white', alpha=0.1)
    else:
        ax1.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='blue', alpha=0.15)

lines1, labels1 = ax1.get_legend_handles_labels()
lines1b, labels1b = ax1b.get_legend_handles_labels()
ax1.legend(lines1 + lines1b, labels1 + labels1b, loc='upper left', facecolor='white', framealpha=1)
ax1.set_title('Логарифмы цен Нефти и Газа (Европа)', fontsize=11, fontweight='bold')

# Второй график: Спред между Алюминием и Нефтью
df['spread'] = df['gas_ln'] - df['oil_ln_new']
avg_spread = df['spread'].mean()

ax2.set_ylabel('Spread (Алюминий - Нефть * b_alu)', color='white')
ax2.plot(df['date_m'], df['spread'], color='black', linewidth=2, label='Спред')
ax2.tick_params(axis='y', labelcolor='black')
ax2.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
ax2.axhline(avg_spread, color='red', linestyle='-', linewidth=2, label=f'Средний спред: {avg_spread:.2f}')
ax2.set_ylim(df['spread'].min() * 0.9, df['spread'].max() * 1.1)

for i in range(len(df) - 1):
    if df['spread'].iloc[i+1] > avg_spread:
        ax2.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='blue', alpha=0.15)
ax1.set_ylim(0.3, 0.7)
# ax1b.set_ylim(6.8, 8.2)
ax2.grid(axis='y', linestyle='-', alpha=0.6)
ax2.set_xticks(filtered_dates['date_m'])
ax2.set_xticklabels(filtered_dates['date_formatted'])

lines2, labels2 = ax2.get_legend_handles_labels()
ax2.legend(lines2, labels2, loc='upper left', facecolor='white', framealpha=1)
ax2.set_title('Спред между Нефтью и Газом (Европа)', fontsize=11, fontweight='bold')

plt.tight_layout()
plt.show()

# Газ (США)

# Создаем фигуру с двумя подграфиками (2 строки, 1 столбец)
fig, (ax1, ax2) = plt.subplots(2, 1, figsize=(10, 6))
plt.subplots_adjust(hspace=0.4)  # Добавляем отступ между графиками

# Первый график: Логарифмы цен Нефти и Алюминия
filtered_dates = df[df['date_m'].str.contains(r'0M01|5M01')]
filtered_dates['date_formatted'] = filtered_dates['date_m'].str[:4]
df['oil_ln_new'] = df['oil_ln'] * b_gas_us

ax1.set_ylabel('Нефть', color='black', fontweight='bold', fontsize=11)
ax1.plot(df['date_m'], df['oil_ln_new'], color='black', linewidth=2, label='Нефть')
ax1.tick_params(axis='y', labelcolor='black')
ax1.set_ylim(0.1, 1.5)
y_ticks = [0.1, 0.3, 0.5, 0.7, 0.9, 1.1, 1.3, 1.5]
ax1.set_yticks(y_ticks)
ax1.set_yticklabels([str(tick) for tick in y_ticks])

ax1b = ax1.twinx()
ax1b.set_ylabel('Газ (США)', color='darkred', fontweight='bold', fontsize=11)
ax1b.plot(df['date_m'], df['gasus_ln'], color='darkred', linewidth=2, label='Газ (США)')
ax1b.tick_params(axis='y', labelcolor='darkred')
# ax1b.set_ylim(6.8, 8.2)

ax1.grid(True, linestyle='-', alpha=0.6)
ax1.set_xticks(filtered_dates['date_m'])
ax1.set_xticklabels(filtered_dates['date_formatted'])

for i in range(len(df) - 1):
    if df['gasus_a_1sm'].iloc[i] <= 0.5:
        ax1.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='white', alpha=0.1)
    else:
        ax1.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='blue', alpha=0.15)

lines1, labels1 = ax1.get_legend_handles_labels()
lines1b, labels1b = ax1b.get_legend_handles_labels()
ax1.legend(lines1 + lines1b, labels1 + labels1b, loc='upper left', facecolor='white', framealpha=1)
ax1.set_title('Логарифмы цен Нефти и Газа (США)', fontsize=11, fontweight='bold')

# Второй график: Спред между Алюминием и Нефтью
df['spread'] = df['gasus_ln'] - df['oil_ln_new']
avg_spread = df['spread'].mean()

ax2.set_ylabel('Spread (Алюминий - Нефть * b_alu)', color='white')
ax2.plot(df['date_m'], df['spread'], color='black', linewidth=2, label='Спред')
ax2.tick_params(axis='y', labelcolor='black')
ax2.yaxis.set_major_formatter(FormatStrFormatter('%.1f'))
ax2.axhline(avg_spread, color='red', linestyle='-', linewidth=2, label=f'Средний спред: {avg_spread:.2f}')
ax2.set_ylim(df['spread'].min() * 0.9, df['spread'].max() * 1.1)

for i in range(len(df) - 1):
    if df['spread'].iloc[i+1] > avg_spread:
        ax2.axvspan(df['date_m'].iloc[i], df['date_m'].iloc[i + 1], color='blue', alpha=0.15)

ax2.grid(axis='y', linestyle='-', alpha=0.6)
ax2.set_xticks(filtered_dates['date_m'])
ax2.set_xticklabels(filtered_dates['date_formatted'])

lines2, labels2 = ax2.get_legend_handles_labels()
ax2.legend(lines2, labels2, loc='upper left', facecolor='white', framealpha=1)
ax2.set_title('Спред между Нефтью и Газом (США)', fontsize=11, fontweight='bold')

plt.tight_layout()
plt.show()

# Visualization 5. Ln цен нефти к Ln цене сырьевого товара (Алюминий, Медь, Газ (Европа), Газ (США))

# Алюминий

# Разделяем данные на две группы: до и после 2007M06
df_before = df[df['alu_a_1sm'] > 0.5]
df_after = df[df['alu_a_1sm'] <= 0.5]

fig, ax = plt.subplots(figsize=(10, 6))

# Общая линия тренда для всех данных (без фиксированного коэффициента)
X_all = df[['oil_ln']]
y_all = df['aluminum_ln']
model_all = LinearRegression().fit(X_all, y_all)
a_all = model_all.intercept_
b_all = model_all.coef_[0]
y_pred_all = model_all.predict(X_all)
r2_all = r2_score(y_all, y_pred_all)
ax.plot(X_all, y_pred_all, color='red', linestyle='-', linewidth=7,
        label=f'y = {a_all:.4f} + {b_all:.4f}x, R² = {r2_all:.4f}')

# Построение точек и линий тренда для состояния 1 (с фиксированным b_alu)
ax.scatter(df_before['oil_ln'], df_before['aluminum_ln'], color='darkblue', label='Состояние 1', alpha=0.5, s=100)
if not df_before.empty:
    X_before = df_before[['oil_ln']]
    y_before = df_before['aluminum_ln']
    a_before = np.mean(y_before) - b_alu * np.mean(X_before.values)
    y_pred_before = a_before + b_alu * X_before.values
    r2_before = r2_score(y_before, y_pred_before)
    ax.plot(X_before, y_pred_before, color='black', linestyle='-', linewidth=5,
            label=f'y = {a_before:.4f} + {b_alu:.4f}x, R² = {r2_before:.4f}')

# Построение точек и линий тренда для состояния 2 (с фиксированным b_alu)
ax.scatter(df_after['oil_ln'], df_after['aluminum_ln'], color='black', label='Состояние 2', alpha=0.5, s=100)
if not df_after.empty:
    X_after = df_after[['oil_ln']]
    y_after = df_after['aluminum_ln']
    a_after = np.mean(y_after) - b_alu * np.mean(X_after.values)
    y_pred_after = a_after + b_alu * X_after.values
    r2_after = r2_score(y_after, y_pred_after)
    ax.plot(X_after, y_pred_after, color='black', linestyle='-', linewidth=5,
            label=f'y = {a_after:.4f} + {b_alu:.4f}x, R² = {r2_after:.4f}')

# Настройка графика
ax.set_xlabel('Нефть ln', color='black', fontsize=13, fontweight='bold')
ax.set_ylabel('Алюминий ln', color='black', fontsize=13, fontweight='bold')
ax.tick_params(axis='both', colors='black')
ax.grid(True, linestyle='-', alpha=0.4)
ax.legend(loc='upper left', fontsize=10)
# plt.title('Цена Алюминия к цене Нефти', color='black', fontsize=12, pad=10)
plt.tight_layout()
plt.show()

# Медь

df_1 = df.iloc[250:].copy()
# Разделяем данные на две группы: до и после 2007M06
df_before = df_1[df_1['cop_a_1sm'] > 0.5]
df_after = df_1[df_1['cop_a_1sm'] <= 0.5]

fig, ax = plt.subplots(figsize=(10, 6))

# Общая линия тренда для всех данных (без фиксированного коэффициента)
X_all = df_1[['oil_ln']]
y_all = df_1['copper_ln']
model_all = LinearRegression().fit(X_all, y_all)
a_all = model_all.intercept_
b_all = model_all.coef_[0]
y_pred_all = model_all.predict(X_all)
r2_all = r2_score(y_all, y_pred_all)
ax.plot(X_all, y_pred_all, color='red', linestyle='-', linewidth=7,
        label=f'y = {a_all:.4f} + {b_all:.4f}x, R² = {r2_all:.4f}')

# Построение точек и линий тренда для состояния 1 (с фиксированным b_cop_2)
ax.scatter(df_before['oil_ln'], df_before['copper_ln'], color='darkblue', label='Состояние 1', alpha=0.5, s=100)
if not df_before.empty:
    X_before = df_before[['oil_ln']]
    y_before = df_before['copper_ln']
    a_before = np.mean(y_before) - b_cop_2 * np.mean(X_before.values)
    y_pred_before = a_before + b_cop_2 * X_before.values
    r2_before = r2_score(y_before, y_pred_before)
    ax.plot(X_before, y_pred_before, color='black', linestyle='-', linewidth=5,
            label=f'y = {a_before:.4f} + {b_cop_2:.4f}x, R² = {r2_before:.4f}')

# Построение точек и линий тренда для состояния 2 (с фиксированным b_cop_2)
ax.scatter(df_after['oil_ln'], df_after['copper_ln'], color='black', label='Состояние 2', alpha=0.5, s=100)
if not df_after.empty:
    X_after = df_after[['oil_ln']]
    y_after = df_after['copper_ln']
    a_after = np.mean(y_after) - b_cop_2 * np.mean(X_after.values)
    y_pred_after = a_after + b_cop_2 * X_after.values
    r2_after = r2_score(y_after, y_pred_after)
    ax.plot(X_after, y_pred_after, color='black', linestyle='-', linewidth=5,
            label=f'y = {a_after:.4f} + {b_cop_2:.4f}x, R² = {r2_after:.4f}')

# Настройка графика
ax.set_xlabel('Нефть ln', color='black', fontsize=13, fontweight='bold')
ax.set_ylabel('Медь ln', color='black', fontsize=13, fontweight='bold')
ax.tick_params(axis='both', colors='black')
ax.grid(True, linestyle='-', alpha=0.4)
ax.legend(loc='upper left', fontsize=10)
# plt.title('Цена Алюминия к цене Нефти', color='black', fontsize=12, pad=10)
plt.tight_layout()
plt.show()

# Газ (Европа)

df_1 = df.iloc[200:].copy()

df_before = df_1[df_1['gas_a_1sm'] > 0.5]
df_after = df_1[df_1['gas_a_1sm'] <= 0.5]

fig, ax = plt.subplots(figsize=(10, 6))

# Общая линия тренда для всех данных (без фиксированного коэффициента)
X_all = df_1[['oil_ln']]
y_all = df_1['gas_ln']
model_all = LinearRegression().fit(X_all, y_all)
a_all = model_all.intercept_
b_all = model_all.coef_[0]
y_pred_all = model_all.predict(X_all)
r2_all = r2_score(y_all, y_pred_all)
ax.plot(X_all, y_pred_all, color='red', linestyle='-', linewidth=7,
        label=f'y = {a_all:.4f} + {b_all:.4f}x, R² = {r2_all:.4f}')

# Построение точек и линий тренда для состояния 1 (с фиксированным b_gas_2)
ax.scatter(df_before['oil_ln'], df_before['gas_ln'], color='darkblue', label='Состояние 1', alpha=0.5, s=100)
if not df_before.empty:
    X_before = df_before[['oil_ln']]
    y_before = df_before['gas_ln']
    a_before = np.mean(y_before) - b_gas_2 * np.mean(X_before.values)
    y_pred_before = a_before + b_gas_2 * X_before.values
    r2_before = r2_score(y_before, y_pred_before)
    ax.plot(X_before, y_pred_before, color='black', linestyle='-', linewidth=5,
            label=f'y = {a_before:.4f} + {b_gas_2:.4f}x, R² = {r2_before:.4f}')

# Построение точек и линий тренда для состояния 2 (с фиксированным b_gas_2)
ax.scatter(df_after['oil_ln'], df_after['gas_ln'], color='black', label='Состояние 2', alpha=0.5, s=100)
if not df_after.empty:
    X_after = df_after[['oil_ln']]
    y_after = df_after['gas_ln']
    a_after = np.mean(y_after) - b_gas_2 * np.mean(X_after.values)
    y_pred_after = a_after + b_gas_2 * X_after.values
    r2_after = r2_score(y_after, y_pred_after)
    ax.plot(X_after, y_pred_after, color='black', linestyle='-', linewidth=5,
            label=f'y = {a_after:.4f} + {b_gas_2:.4f}x, R² = {r2_after:.4f}')

# Настройка графика
ax.set_xlabel('Нефть ln', color='black', fontsize=13, fontweight='bold')
ax.set_ylabel('Газ (Европа) ln', color='black', fontsize=13, fontweight='bold')
ax.tick_params(axis='both', colors='black')
ax.grid(True, linestyle='-', alpha=0.4)
ax.legend(loc='upper left', fontsize=10)
# plt.title('Цена Алюминия к цене Нефти', color='black', fontsize=12, pad=10)
plt.tight_layout()
plt.show()

# Газ (США)

df_before = df[df['gasus_a_1sm'] > 0.5]
df_after = df[df['gasus_a_1sm'] <= 0.5]

fig, ax = plt.subplots(figsize=(10, 6))

# Общая линия тренда для всех данных (без фиксированного коэффициента)
X_all = df[['oil_ln']]
y_all = df['gasus_ln']
model_all = LinearRegression().fit(X_all, y_all)
a_all = model_all.intercept_
b_all = model_all.coef_[0]
y_pred_all = model_all.predict(X_all)
r2_all = r2_score(y_all, y_pred_all)
ax.plot(X_all, y_pred_all, color='red', linestyle='-', linewidth=7,
        label=f'y = {a_all:.4f} + {b_all:.4f}x, R² = {r2_all:.4f}')

# Построение точек и линий тренда для состояния 1 (с фиксированным b_alu)
ax.scatter(df_before['oil_ln'], df_before['gasus_ln'], color='darkblue', label='Состояние 1', alpha=0.5, s=100)
if not df_before.empty:
    X_before = df_before[['oil_ln']]
    y_before = df_before['gasus_ln']
    a_before = np.mean(y_before) - b_gas_us * np.mean(X_before.values)
    y_pred_before = a_before + b_gas_us * X_before.values
    r2_before = r2_score(y_before, y_pred_before)
    ax.plot(X_before, y_pred_before, color='black', linestyle='-', linewidth=5,
            label=f'y = {a_before:.4f} + {b_gas_us:.4f}x, R² = {r2_before:.4f}')

# Построение точек и линий тренда для состояния 2 (с фиксированным b_gas_us)
ax.scatter(df_after['oil_ln'], df_after['gasus_ln'], color='black', label='Состояние 2', alpha=0.5, s=100)
if not df_after.empty:
    X_after = df_after[['oil_ln']]
    y_after = df_after['gasus_ln']
    a_after = np.mean(y_after) - b_gas_us * np.mean(X_after.values)
    y_pred_after = a_after + b_gas_us * X_after.values
    r2_after = r2_score(y_after, y_pred_after)
    ax.plot(X_after, y_pred_after, color='black', linestyle='-', linewidth=5,
            label=f'y = {a_after:.4f} + {b_gas_us:.4f}x, R² = {r2_after:.4f}')

# Настройка графика
ax.set_xlabel('Нефть ln', color='black', fontsize=13, fontweight='bold')
ax.set_ylabel('Газ (США) ln', color='black', fontsize=13, fontweight='bold')
ax.tick_params(axis='both', colors='black')
ax.grid(True, linestyle='-', alpha=0.4)
ax.legend(loc='upper left', fontsize=10)
# plt.title('Цена Алюминия к цене Нефти', color='black', fontsize=12, pad=10)
plt.tight_layout()
plt.show()